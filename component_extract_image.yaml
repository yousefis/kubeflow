name: Extract image
inputs:
- {name: file, type: Tarball}
outputs:
- {name: output_img, type: Image}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.1.4' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==1.1.4' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def extract_image(file_path,
                    output_img):
        import glob
        import pandas as pd
        import tarfile

        tar = tarfile.open(name=file_path, mode="r")
        members = tar.getmembers()
        output_img = tar.extractfile(members[2])

      import argparse
      _parser = argparse.ArgumentParser(prog='Extract image', description='')
      _parser.add_argument("--file", dest="file_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-img", dest="output_img", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = extract_image(**_parsed_args)
    args:
    - --file
    - {inputPath: file}
    - --output-img
    - {outputPath: output_img}
